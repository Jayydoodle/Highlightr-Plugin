/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var obsidian = require("obsidian");
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * Transform the case in `value` (`string`) to match that of `base` (`string`).
 *
 * @param {string} value
 * @param {string} base
 * @returns {string}
 */
// العربية
var ar = {};
// čeština
var cz = {};
// Dansk
var da = {};
// Deutsch
var de = {};
// English
var en = {
    //main
    "Highlight Text": "Highlight Text",
    "Unhighlight Text": "Unhighlight Text",
    //_constants.ts
    Highlightr: "Highlightr",
    //added to Context Menu
    Highlight: "Highlight",
    Unhighlight: "Unhighlight",
    //settingsTab.ts
    "Highlightr Settings": "Highlightr Settings",
    "Click ": "Click ",
    here: "here",
    "Pick Highlighter Style": "Pick Highlighter Style",
    "Coming soon...": "Coming soon...",
    "Click Here": "Click Here",
    "More Information": "More Information",
    "View Information about the Plugin.": "View Information about the Plugin.",
    "More Info": "More Info",
    Donate: "Donate",
    "If you like this Plugin and are considering donating to support continued development, use the button below!": "If you like this Plugin and are considering donating to support continued development, use the button below!",
    "Created with ❤️ by Chetachi": "Created with ❤️ by Chetachi",
    "Choose a Highlight Color": "Choose a Highlight Color",
    //highlighterModal
    Pink: "Pink",
    Red: "Red",
    Orange: "Orange",
    Yellow: "Yellow",
    Green: "Green",
    Blue: "Blue",
    Purple: "Purple"
};
// British English
var enGB = {};
// Español
var es = {};
// français
var fr = {};
// हिन्दी
var hi = {};
// Bahasa Indonesia
var id = {};
// Italiano
var it = {};
// 日本語
var ja = {};
// 한국어
var ko = {};
// Nederlands
var nl = {};
// Norsk
var no = {};
// język polski
var pl = {};
// Português
var pt = {};
// Português do Brasil
// Brazilian Portuguese
var ptBR = {};
// Română
var ro = {};
// русский
var ru = {};
// Türkçe
var tr = {};
// 简体中文
var zhCN = {};
// 繁體中文
var zhTW = {};
var localeMap = {
    ar: ar,
    cs: cz,
    da: da,
    de: de,
    en: en,
    "en-gb": enGB,
    es: es,
    fr: fr,
    hi: hi,
    id: id,
    it: it,
    ja: ja,
    ko: ko,
    nl: nl,
    nn: no,
    pl: pl,
    pt: pt,
    "pt-br": ptBR,
    ro: ro,
    ru: ru,
    tr: tr,
    "zh-cn": zhCN,
    "zh-tw": zhTW
};
var locale = localeMap[obsidian.moment.locale()];
function t(str) {
    if (!locale) {
        console.error("Error: locale not found", obsidian.moment.locale());
    }
    return (locale && locale[str]) || en[str];
}
var DEFAULT_SETTINGS = {};
var highlighterColorsMap = [
    //This could be a flat object but idk
    { color: "Pink", value: "#FFB8EB" },
    { color: "Red", value: "#FF5582" },
    { color: "Orange", value: "#FFB86C" },
    { color: "Yellow", value: "#FFF3A3" },
    { color: "Green", value: "#BBFABB" },
    { color: "Blue", value: "#ADCCFF" },
    { color: "Purple", value: "#D2B3FF" },
    { color: "Grey", value: "#CACFD9" },
];
var newDiv = document.createElement("div");
if (newDiv) {
    var scope = document.querySelector("body");
    newDiv.setAttribute("id", "highlighterContainer");
    scope.addEventListener("contextmenu", function (event) {
        var clientHeight = 200;
        var clientWidth = 158;
        var mouseX = event.clientX, mouseY = event.clientY;
        newDiv.style.top = mouseY + "px";
        newDiv.style.left = mouseX + "px";
        if (clientHeight + mouseY > window.innerHeight) {
            newDiv.style.top = mouseY - clientHeight + "px";
        }
        else {
            newDiv.style.top = mouseY + 5 + "px";
        }
        if (clientWidth + mouseX > window.innerWidth) {
            newDiv.style.left = mouseX - clientWidth + "px";
        }
        else {
            newDiv.style.left = mouseX + "px";
        }
    });
}
var HighlighterPopover = /** @class */ (function (_super) {
    __extends(HighlighterPopover, _super);
    function HighlighterPopover(activeLeaf, editor) {
        var _this = _super.call(this, activeLeaf, editor) || this;
        _this.createContainer();
        return _this;
    }
    HighlighterPopover.prototype.createContainer = function () {
        var _this = this;
        var activeLeaf = this.app.workspace.activeLeaf;
        document.body.appendChild(newDiv); // adding element to the body.
        // create var for container.
        var colorButtonContainer = document.getElementById("highlighterContainer");
        // create ul element and set the id attribute.
        var colorButtons = document.createElement("ul");
        colorButtons.setAttribute("id", "highlightColorButtonList");
        colorButtons.addEventListener("mousedown", function (event) {
            event.preventDefault();
        });
        var colorTranslucency = "99";
        for (var i = 0; i < highlighterColorsMap.map(function (a) { return a.color; }).length; i++) {
            var colorButton = document.createElement("li");
            colorButton.setAttribute("id", highlighterColorsMap.map(function (a) { return a.value; })[i] + colorTranslucency);
            var colorButtonText = document.createElement("span");
            colorButtonText.innerHTML = highlighterColorsMap.map(function (a) { return a.color; })[i];
            colorButtonText.setAttribute("style", "font-weight: 400;");
            var colorButtonIcon = document.createElement("span");
            colorButtonIcon.innerHTML =
                '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" focusable="false" width="1.15em" height="1.15em" style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><title>' +
                    highlighterColorsMap.map(function (a) { return a.color; })[i] +
                    '</title><path d="M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10s-4.477 10-10 10zm0-2a8 8 0 1 0 0-16a8 8 0 0 0 0 16zm0-3a5 5 0 1 1 0-10a5 5 0 0 1 0 10z"/></svg>';
            colorButtonIcon.setAttribute("style", "margin-right: 10px; vertical-align: -.15em; display: inline-flex;");
            colorButtonIcon.style.fill =
                highlighterColorsMap.map(function (a) { return a.value; })[i] + colorTranslucency;
            colorButtons.appendChild(colorButton);
            for (var j = 0; j < 1; j++) {
                colorButton.appendChild(colorButtonIcon);
                colorButton.appendChild(colorButtonText);
            }
            colorButtonContainer.appendChild(colorButtons); // add list to the container.
        }
        document
            .getElementById("highlightColorButtonList")
            .addEventListener("click", function (e) {
            // e.target is the targetted element.
            var target = e.target;
            var targetid = e.target.id;
            if (e.target && target.nodeName == "LI") {
                var pickedColor = targetid;
            }
            else if (e.target && target.nodeName == "SPAN") {
                var pickedColor = target.parentElement.id;
            }
            else if (e.target && target.nodeName == "svg") {
                var pickedColor = target.parentElement.parentElement.id;
            }
            else if (e.target && target.nodeName == "path") {
                var pickedColor = target.parentElement.parentElement.parentElement.id;
            }
            else if (e.target && target.nodeName == "UL") {
                var pickedColor = target.firstElementChild.id;
            }
            var selection = activeLeaf.view.editor.getSelection();
            activeLeaf.view.editor.replaceSelection('<mark style="background: ' +
                pickedColor +
                ';">' +
                selection +
                "</mark>");
            //debugger
            var ulElement = document.getElementById("highlightColorButtonList");
            if (ulElement) {
                if (ulElement.firstChild) {
                    ulElement.removeChild(ulElement.firstChild);
                    var divElement = document.getElementById("highlighterContainer");
                    while (divElement.firstChild) {
                        divElement.removeChild(divElement.firstChild);
                        if (newDiv) {
                            newDiv.remove();
                        }
                        else {
                            return;
                        }
                    }
                }
            }
        });
        window.addEventListener("click", function (e) {
            kill(e, _this);
        });
        var kill = function (e, trigger) {
            var mouseX = e.clientX;
            var mouseY = e.clientY;
            var colorButtonContainerWidth = colorButtonContainer.clientWidth;
            var colorButtonContainerHeight = colorButtonContainer.clientHeight;
            var colorButtonContainerLeft = Number(colorButtonContainer.style.left.replace("px", ""));
            var colorButtonContainerTop = Number(colorButtonContainer.style.top.replace("px", ""));
            if (mouseX < colorButtonContainerLeft ||
                mouseX > colorButtonContainerLeft + colorButtonContainerWidth ||
                mouseY < colorButtonContainerTop ||
                mouseY > colorButtonContainerTop + colorButtonContainerHeight ||
                !trigger) {
                var ulElement = document.getElementById("highlightColorButtonList");
                if (ulElement) {
                    if (ulElement.firstChild) {
                        ulElement.removeChild(ulElement.firstChild);
                        var divElement = document.getElementById("highlighterContainer");
                        while (divElement.firstChild) {
                            divElement.removeChild(divElement.firstChild);
                            if (newDiv) {
                                newDiv.remove();
                            }
                            else {
                                return;
                            }
                        }
                    }
                }
            }
        };
    };
    return HighlighterPopover;
}(obsidian.Plugin));
var SettingsTab = /** @class */ (function (_super) {
    __extends(SettingsTab, _super);
    function SettingsTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    SettingsTab.prototype.display = function () {
        var _a = this, containerEl = _a.containerEl; _a.plugin;
        containerEl.empty();
        containerEl.createEl("h2", { text: t("Highlightr Settings") });
        new obsidian.Setting(containerEl)
            .setName(t("Pick Highlighter Style"))
            .setDesc(t("Coming soon..."));
        var div = containerEl.createEl("div", {
            cls: "cDonationSection"
        });
        var credit = document.createElement("p");
        var donateText = document.createElement("p");
        donateText.appendText(t("If you like this Plugin and are considering donating to support continued development, use the button below!"));
        credit.appendText(t("Created with ❤️ by Chetachi"));
        credit.setAttribute("style", "color: var(--text-muted)");
        div.appendChild(donateText);
        div.appendChild(credit);
        div.appendChild(createDonateButton("https://www.buymeacoffee.com/chetachi"));
    };
    SettingsTab.prototype.save = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.plugin.saveSettings()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return SettingsTab;
}(obsidian.PluginSettingTab));
var createDonateButton = function (link) {
    var a = document.createElement("a");
    a.setAttribute("href", link);
    a.addClass("advanced-tables-donate-button");
    a.innerHTML = "<img src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=chetachi&button_colour=e3e7ef&font_colour=262626&font_family=Inter&outline_colour=262626&coffee_colour=ff0000\">";
    return a;
};
function handleContextMenu(menu, instance, plugin) {
    var _this = this;
    if (instance.getSelection()) {
        menu.addItem(function (item) {
            item
                .setTitle(t("Highlight"))
                .setIcon("highlightpen")
                .onClick(function (_) {
                return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        plugin.handleHighlighter();
                        return [2 /*return*/];
                    });
                });
            });
        });
        menu.addItem(function (item) {
            item
                .setTitle(t("Unhighlight"))
                .setIcon("eraser")
                .onClick(function (_) {
                if (instance.getSelection()) {
                    var currentStr = instance.getSelection();
                    var newStr = currentStr.replace(/\<.*?[^\>]\>/g, "");
                    // Printing the new string :)
                    instance.replaceSelection(newStr);
                }
            });
        });
    }
}
var icons = {
    eraser: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"0\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M2.586 15.408l4.299 4.299a.996.996 0 0 0 .707.293h12.001v-2h-6.958l7.222-7.222c.78-.779.78-2.049 0-2.828L14.906 3a2.003 2.003 0 0 0-2.828 0l-4.75 4.749l-4.754 4.843a2.007 2.007 0 0 0 .012 2.816zM13.492 4.414l4.95 4.95l-2.586 2.586L10.906 7l2.586-2.586zM8.749 9.156l.743-.742l4.95 4.95l-4.557 4.557a1.026 1.026 0 0 0-.069.079h-1.81l-4.005-4.007l4.748-4.837z\" fill=\"currentColor\"/></svg>",
    highlightpen: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"0\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20.707 5.826l-3.535-3.533a.999.999 0 0 0-1.408-.006L7.096 10.82a1.01 1.01 0 0 0-.273.488l-1.024 4.437L4 18h2.828l1.142-1.129l3.588-.828c.18-.042.345-.133.477-.262l8.667-8.535a1 1 0 0 0 .005-1.42zm-9.369 7.833l-2.121-2.12l7.243-7.131l2.12 2.12l-7.242 7.131zM4 20h16v2H4z\" fill=\"currentColor\"/></svg>g>"
};
var addIcons = function () {
    Object.keys(icons).forEach(function (key) {
        obsidian.addIcon(key, icons[key]);
    });
};
var HighlightrPlugin = /** @class */ (function (_super) {
    __extends(HighlightrPlugin, _super);
    function HighlightrPlugin(app, manifest, editor) {
        var _this = _super.call(this, app, manifest, editor) || this;
        _this.highlighterPopover = null;
        _this.menus = [
            {
                pluginName: _this.manifest.id,
                name: t("Highlight"),
                icon: "highlightpen",
                onClick: function (instance) {
                    if (instance.getSelection()) {
                        _this.handleHighlighter();
                    }
                },
                enabled: true
            },
            {
                pluginName: _this.manifest.id,
                name: t("Unhighlight"),
                icon: "eraser",
                onClick: function (instance) {
                    if (instance.getSelection()) {
                        var currentStr = instance.getSelection();
                        var newStr = currentStr.replace(/\<.*?[^\>]\>/g, "");
                        // Printing the new string :)
                        instance.replaceSelection(newStr);
                    }
                },
                enabled: true
            },
        ];
        _this.handleHighlighter = obsidian.debounce(function () {
            var activeLeaf = _this.app.workspace.activeLeaf;
            if ((activeLeaf === null || activeLeaf === void 0
                ? void 0
                : activeLeaf.view) instanceof obsidian.MarkdownView) {
                var view = activeLeaf.view;
                if (view.getMode() === "source") {
                    var editor_1 = view.editor;
                    editor_1.getSelection();
                    _this.highlighterPopover = new HighlighterPopover(activeLeaf, editor_1);
                }
            }
        });
        return _this;
    }
    HighlightrPlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log("Loading Highlightr");
                        return [4 /*yield*/, this.loadSettings()];
                    case 1:
                        _a.sent();
                        addIcons();
                        this.addSettingTab(new SettingsTab(this.app, this));
                        this.addCommand({
                            name: t("Highlight Text"),
                            callback: function () { }
                        });
                        this.registerEvent(this.app.workspace.on("editor-menu", function (menu, editor, _) {
                            handleContextMenu(menu, editor, _this);
                        }));
                        return [2 /*return*/];
                }
            });
        });
    };
    HighlightrPlugin.prototype.onunload = function () {
        console.log("Unloading Highlightr");
    };
    HighlightrPlugin.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = this;
                        _c = (_b = Object).assign;
                        _d = [{},
                            DEFAULT_SETTINGS];
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = _c.apply(_b, _d.concat([_e.sent()]));
                        return [2 /*return*/];
                }
            });
        });
    };
    HighlightrPlugin.prototype.saveSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.saveData(this.settings)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return HighlightrPlugin;
}(obsidian.Plugin));
module.exports = HighlightrPlugin;

module.exports = HighlightrPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
